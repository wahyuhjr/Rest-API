// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: executionTime.sql

package sqlc

import (
	"context"
)

const createExecutionTime = `-- name: CreateExecutionTime :one
INSERT INTO execution_time (parameter,test,value, deviation)
VALUES ($1, $2, $3, $4)
RETURNING id, parameter, test, value, deviation
`

type CreateExecutionTimeParams struct {
	Parameter string `json:"parameter"`
	Test      string `json:"test"`
	Value     float32 `json:"value"`
	Deviation float32 `json:"deviation"`
}

func (q *Queries) CreateExecutionTime(ctx context.Context, arg CreateExecutionTimeParams) (ExecutionTime, error) {
	row := q.db.QueryRowContext(ctx, createExecutionTime,
		arg.Parameter,
		arg.Test,
		arg.Value,
		arg.Deviation,
	)
	var i ExecutionTime
	err := row.Scan(
		&i.ID,
		&i.Parameter,
		&i.Test,
		&i.Value,
		&i.Deviation,
	)
	return i, err
}

const deleteExecutionTime = `-- name: DeleteExecutionTime :one
DELETE FROM execution_time WHERE id = $1
RETURNING id, parameter, test, value, deviation
`

func (q *Queries) DeleteExecutionTime(ctx context.Context, id int32) (ExecutionTime, error) {
	row := q.db.QueryRowContext(ctx, deleteExecutionTime, id)
	var i ExecutionTime
	err := row.Scan(
		&i.ID,
		&i.Parameter,
		&i.Test,
		&i.Value,
		&i.Deviation,
	)
	return i, err
}

const getExecutionTimeByID = `-- name: GetExecutionTimeByID :one
SELECT id, parameter, test, value, deviation FROM execution_time WHERE id = $1
`

func (q *Queries) GetExecutionTimeByID(ctx context.Context, id int32) (ExecutionTime, error) {
	row := q.db.QueryRowContext(ctx, getExecutionTimeByID, id)
	var i ExecutionTime
	err := row.Scan(
		&i.ID,
		&i.Parameter,
		&i.Test,
		&i.Value,
		&i.Deviation,
	)
	return i, err
}

const getExecutionTimes = `-- name: GetExecutionTimes :many
SELECT id, parameter, test, value, deviation FROM execution_time
`

func (q *Queries) GetExecutionTimes(ctx context.Context) ([]ExecutionTime, error) {
	rows, err := q.db.QueryContext(ctx, getExecutionTimes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExecutionTime
	for rows.Next() {
		var i ExecutionTime
		if err := rows.Scan(
			&i.ID,
			&i.Parameter,
			&i.Test,
			&i.Value,
			&i.Deviation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExecutionTime = `-- name: UpdateExecutionTime :one
UPDATE execution_time
SET parameter = $2, test = $4, value = $3,  deviation = $5
WHERE id = $1
RETURNING id, parameter, test, value, deviation
`

type UpdateExecutionTimeParams struct {
	ID        int32          `json:"id"`
	Parameter string `json:"parameter"`
	Test      string `json:"test"`
	Value     float32 `json:"value"`
	Deviation float32 `json:"deviation"`
}

func (q *Queries) UpdateExecutionTime(ctx context.Context, arg UpdateExecutionTimeParams) (ExecutionTime, error) {
	row := q.db.QueryRowContext(ctx, updateExecutionTime,
		arg.ID,
		arg.Parameter,
		arg.Value,
		arg.Test,
		arg.Deviation,
	)
	var i ExecutionTime
	err := row.Scan(
		&i.ID,
		&i.Parameter,
		&i.Test,
		&i.Value,
		&i.Deviation,
	)
	return i, err
}
